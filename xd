class RPQ:

    # CZYTANIE Z PLIKU
    @staticmethod
    def readData(filepath):
        data = [];
        with open(filepath) as f:
            n, kolumny = [int(x) for x in next(f).split()]
            data = [[int(x) for x in line.split()] for line in f]
        return n, data

    # FUNCKJA STRAT
    @staticmethod
    def loss_function(data):
        max_time_q = sum(data[0]) # bieżący czas dostarczenia zadania
        time = data[0][0] + data[0][1]
        C = []
        C.append(time)
        for t in range(1, len(data)):
            if time > data[t][0]:
                time = time + data[t][1]
            else:
                time = data[t][0] + data[t][1]

            time_q = data[t][2] + time
            max_time_q = max(max_time_q, time_q)
            C.append(max_time_q)
        return C

    @staticmethod
    def sort_R(data):
        order_by_access_time = data.copy()
        order_by_access_time.sort(key=lambda x: x[0])
        return order_by_access_time

n, data = RPQ.readData('data/data10.txt')
sortedData = RPQ.sort_R(data);

print('Nieposortowane dane')
print(data)
print('\nPosortowane dane')
print(sortedData)

non_sorted = RPQ.loss_function((data))
sorted = RPQ.loss_function(sortedData)

print('\nNon sorted')
print(non_sorted)

print('\nSort by R')
print(sorted)


v=sum(sortedData[0])
print('\nSuma posortowanego')
print(v)